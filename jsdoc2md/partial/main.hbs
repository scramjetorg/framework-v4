{{~#unless page}}
![Scramjet Logo](https://assets.scramjet.org/images/framework-logo-256.svg)

**Version 4**

[![npm version](https://img.shields.io/npm/v/scramjet)](https://www.npmjs.com/scramjet)
[![npm downloads](https://img.shields.io/npm/dt/scramjet)](https://www.npmjs.com/scramjet)
[![last commit](https://img.shields.io/github/last-commit/scramjetorg/framework-v4)](https://github.com/scramjetorg/framework-v4)
[![Build status](https://img.shields.io/github/checks-status/scramjetorg/framework-v4/master?label=build)](https://github.com/scramjetorg/framework-v4)
[![Known Vulnerabilities](https://snyk.io/test/github/scramjetorg/framework-v4/badge.svg)](https://snyk.io/test/github/scramjetorg/framework-v4)
[![Discord](https://img.shields.io/discord/925384545342201896?label=discord)](https://discord.gg/52USU8q7AX)
[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=7F7V65C43EBMW)

## What does it do?
{{/unless}}

Scramjet is a fast, simple, functional reactive stream programming framework written on top of node.js object
streams. The code is written by chaining functions that transform the streamed data, including well known map, filter and
reduce and fully compatible with ES7 async/await. Thanks to it some built in optimizations scramjet is much faster and much
much simpler than similar frameworks when using asynchronous operations.

The main advantage of scramjet is running asynchronous operations on your data streams. First of all it allows you to
perform the transformations both synchronously and asynchronously by using the same API - so now you can "map" your
stream from whatever source and call any number of API's consecutively. And if you're after some heavy maths
there's an option of running your stream as multi-threaded!

**We are working on the next version of Scramjet Framework and are very eager for your feedback! You can see and test `pre-v5`**:

* JavaScript/TypeScript version in [scramjeorg/framework-js](https://github.com/scramjetorg/framework-js) repository and
* a brand new Python version in [scramjetorg/framework-python](https://github.com/scramjetorg/framework-python)!

## Example

How about a full API to API migration, reading a long list of items from one API and checking them one after another,
pushing them to another API? With simultaneous request control? And outputting the log of the conversion? Easy!

```javascript
{{{inject 'samples/intro/main-example.js'}}}
```

Here you can find a most basic guide on how to execute the above example starting from just having access to some command
line: [Scramjet from Scratch](./docs/scramjet-from-scratch.md)

## Execution and deployment

You can now run stream processing programs with our Scramjet Transform Hub. It will allow you to deploy and execute programs
on local and remote environments of your choice and it's as easy as:

```sh
npm i -g @scramjet/sth @scramjet/cli
scramjet-transform-hub &
si run <path-to-your-program-dir>
```

See more info:

* on our website [scramjet.org](https://scramjet.org),
* the documentation repo [scramjetorg/scramjet-cloud-docs](https://github.com/scramjetorg/scramjet-cloud-docs)
* the source code and development guide [scramjetorg/transform-hub](https://github.com/scramjetorg/transform-hub)

## Usage

Scramjet uses functional programming to run transformations on your data streams in a fashion
very similar to the well known event-stream node module. First create a stream from a source:

Use `DataStream.from(someThing)` to create a new stream from an Array, Generator, AsyncGenerator,
Iterator or Readable stream. See the [DataStream.from docs](docs/data-stream.md#DataStream.from)
for more information, here's a sample.

```javascript
{{{inject 'samples/intro/from.js'}}}
```

Use `DataStream.pipeline(readable, transforms)` to create a pipeline of transform streams and/or
stream modules. Any number of consecutive arguments will get piped one into another.

```javascript
{{{inject 'samples/intro/pipeline.js'}}}
```

Some methods like `from`, `use`, `flatMap` allow using ES6 generators and ES7 async generators:

```javascript
{{{inject 'samples/intro/generators.js'}}}
```

Most transformations are done by passing a transform function. You can write your function in three ways:

1. Synchronous

Example: a simple stream transform that outputs a stream of objects of the same id property and the length of the value string.

 ```javascript
DataStream
    .from(items)
    .map(
        (item) => ({id: item.id, length: item.value.length})
    )
 ```

2. Asynchronous using ES2015 async await

Example: A simple stream that uses `Fetch API` to get all the contents of all entries in the stream

```javascript
StringStream
    .from(urls)
    .map(
        async (url) => fetch(url).then(res => res.json())
    )
    .JSONParse()
```

3. Asynchronous using Promises

 Example: A simple stream that fetches an url mentioned in the incoming object

 ```javascript
    datastream.map(
        (item) => new Promise((resolve, reject) => {
            request(item.url, (err, res, data) => {
                if (err)
                    reject(err); // will emit an "error" event on the stream
                else
                    resolve(data);
            });
        })
    )
 ```

The actual logic of this transform function is as if you passed your function to the `then` method of a Promise
resolved with the data from the input stream.

4. Streams with multi-threading

To distribute your code among the processor cores, just use the method ```distribute```:

 ```javascript
    datastream.distribute(
        16, // number of threads
        (stream) => {
            // multi-threaded code goes here.
            // it MUST return a valid stream back to the main thread.
        }
    )
 ```

## Writing modules

Scramjet allows writing simple modules that are resolved in the same way as node's `require`. A module
is a simple javascript file that exposes a function taking a stream and any number of following arguments
as default export.

Here's an example:

```javascript
module.exports = (stream, arg1) => {
    const mapper = (chunk) => mapper(chunk, arg1);
    return stream.map(mapper);
}
```

Then it can be used with `DataStream.use` function like this:

```javascript
myStream.use("./path/to/my-module", "arg1");
```

If these modules are published you can also simply use `myStream.use("published-module")`.

For more universal modules you can use helper methods `createTransformModule` and `createReadModule` that scramjet exports. See more in about this in this blog post [Scramjet Modules](https://www.scramjet.org/posts/modules).

## Typescript support

Scramjet aims to be fully documented and expose TypeScript declarations. First version to include  definitions in `.d.ts`
folder is 4.15.0. More TypeScript support will be added with next versions, so feel free to report issues in GitHub.

## Detailed docs

Here's the list of the exposed classes and methods, please review the specific documentation for details:

* [```scramjet```](docs/index.md) - module exports explained
* [```scramjet.DataStream```](docs/data-stream.md) - the base class for all scramjet classes, object stream.
* [```scramjet.BufferStream```](docs/buffer-stream.md) - a stream of Buffers.
* [```scramjet.StringStream```](docs/string-stream.md) - a stream of Strings.
* [```scramjet.NumberStream```](docs/number-stream.md) - a stream of Numbers
* [```scramjet.MultiStream```](docs/multi-stream.md) - A group of streams (for multi-threading and muxing).
* [more on plugins](docs/plugins.md) - a description and link.

Note that:

* Most of the methods take a Function argument that operates on the stream items.
* The Function, unless it's stated otherwise, will receive an argument with the next chunk.
* If you want to perform your operations asynchronously, return a Promise, otherwise just return the right value.

## CLI

Check out the command line interface for simplified scramjet usage with [scramjet-cli](https://www.npmjs.com/package/scramjet-cli)

    $ sjr -i http://datasource.org/file.csv ./transform-module-1 ./transform-module-1 | gzip > logs.gz

{{#unless page~}}
## Quick reference of some methods

{{#classes ~}}{{>stream-class}}{{/classes}}

{{/unless~}}
## Scramjet core

Don't like dependencies? Scramjet packs just a couple of those, but if you are really really annoyed by second depth of
deps, please try [scramjet-core](https://www.npmjs.com/package/scramjet-core).

Only the most vital methods there, but the library is dependency free.

## License and contributions

As of version 2.0 Scramjet is MIT Licensed.

{{#unless page~}}
[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fscramjetorg%2Fscramjet.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fscramjetorg%2Fscramjet?ref=badge_large)

{{/unless~}}
## Help wanted

The project need's your help! There's lots of work to do - transforming and muxing, joining and splitting, browserifying, modularizing, documenting and issuing those issues.

If you want to help and be part of the Scramjet team, please reach out to us, [on discord](https://discord.gg/52USU8q7AX) or email us: [opensource@scramjet.org](opensource@scramjet.org).

## Donation

Do you like this project? It helped you to reduce time spent on delivering your solution? You are welcome to buy us a coffee ;)

[Support us with Github Sponsors](https://github.com/sponsors/scramjetorg)

[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=7F7V65C43EBMW)
